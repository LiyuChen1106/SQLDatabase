-- Solo superior

SET SEARCH_PATH TO markus;
DROP TABLE IF EXISTS q3;

-- You must not change this table definition.
CREATE TABLE q3 (
	assignment_id integer,
	description varchar(100), 
	num_solo integer, 
	average_solo real,
	num_collaborators integer, 
	average_collaborators real, 
	average_students_per_submission real
);

-- You may find it convenient to do this for each of the views
-- that define your intermediate steps.  (But give them better names!)

DROP VIEW IF EXISTS all_assignment_group CASCADE;
DROP VIEW IF EXISTS total_possible_marks CASCADE;
DROP VIEW IF EXISTS total_mark_all_assignments CASCADE;
DROP VIEW IF EXISTS solo CASCADE;
DROP VIEW IF EXISTS solo_info CASCADE;
DROP VIEW IF EXISTS collaborators CASCADE;
DROP VIEW IF EXISTS collaborators_info CASCADE;
DROP VIEW IF EXISTS almost_done CASCADE;

-- Define views for your intermediate steps here.


-- make a list for all assignments and groups
CREATE VIEW all_assignment_group AS
SELECT assignment_id, group_id
FROM Assignment natural left join AssignmentGroup;

-- total possible mark for each assignments
CREATE VIEW total_possible_marks AS
SELECT assignment_id, sum(weight * out_of) as total_possible_mark
FROM RubricItem
group by assignment_id;

-- total mark for each group including all assignments
CREATE VIEW total_mark_all_assignments AS
SELECT assignment_id, group_id, (mark / total_possible_mark) * 100 as mark_percent
FROM all_assignment_group natural left join total_possible_marks natural left join Result;


-- group id for solos
CREATE VIEW solo AS
SELECT group_id, count(*) as group_size
FROM Membership
group by group_id
having count(*) = 1;

-- number of students and average grade for solos
CREATE VIEW solo_info AS
SELECT assignment_id, sum(group_size) as num_solo, avg(mark_percent) as average_solo
FROM total_mark_all_assignments natural join solo
group by assignment_id;

-- group id and group size for collaborators
CREATE VIEW collaborators AS
SELECT group_id, count(*) as group_size
FROM Membership
group by group_id
having count(*) > 1;

-- number of students and average grade for collaborators
CREATE VIEW collaborators_info AS
SELECT assignment_id, sum(group_size) as num_collaborators, avg(mark_percent) as average_collaborators
FROM total_mark_all_assignments natural join collaborators
group by assignment_id;

-- combine everything together
CREATE VIEW almost_done AS
SELECT assignment_id, num_solo, average_solo, num_collaborators, average_collaborators, (num_solo + num_collaborators) / count(group_id) as average_students_per_submission
FROM total_mark_all_assignments natural left join solo_info natural left join collaborators_info
group by assignment_id, num_solo, average_solo, num_collaborators, average_collaborators;

-- Final answer.
INSERT INTO q3
	-- put a final query here so that its results will go into the table.
(SELECT assignment_id, description, num_solo, average_solo, num_collaborators, average_collaborators, average_students_per_submission
FROM almost_done natural right join Assignment);