-- Getting soft

SET SEARCH_PATH TO markus;
DROP TABLE IF EXISTS q2;

-- You must not change this table definition.
CREATE TABLE q2 (
	ta_name varchar(100),
	average_mark_all_assignments real,
	mark_change_first_last real
);

-- You may find it convenient to do this for each of the views
-- that define your intermediate steps.  (But give them better names!)

DROP VIEW IF EXISTS all_assignment_group CASCADE;
DROP VIEW IF EXISTS total_possible_marks CASCADE;
DROP VIEW IF EXISTS total_mark CASCADE;
DROP VIEW IF EXISTS grader_assignment CASCADE;
DROP VIEW IF EXISTS grader_num_assignment CASCADE;
DROP VIEW IF EXISTS every_assignment CASCADE;
DROP VIEW IF EXISTS ten_groups CASCADE;
DROP VIEW IF EXISTS grader_mark CASCADE;
DROP VIEW IF EXISTS grader_avgmark_duedate CASCADE;
DROP VIEW IF EXISTS not_up CASCADE;
DROP VIEW IF EXISTS up CASCADE;
DROP VIEW IF EXISTS answer CASCADE;

-- Define views for your intermediate steps here.


-- make a list for all assignments and groups
CREATE VIEW all_assignment_group AS
SELECT assignment_id, group_id
FROM Assignment natural left join AssignmentGroup;

-- total possible mark for each assignments
CREATE VIEW total_possible_marks AS
SELECT assignment_id, sum(weight * out_of) as total_possible_mark
FROM RubricItem
group by assignment_id;

-- total mark for each group including all assignments
CREATE VIEW total_mark AS
SELECT assignment_id, group_id, (mark / total_possible_mark) * 100 as mark_percent
FROM all_assignment_group natural left join total_possible_marks natural left join Result;

-- combine grader and assignment
CREATE VIEW grader_assignment AS
SELECT assignment_id, group_id, username
FROM Grader natural join AssignmentGroup;

-- count how many assignments each grader has graded 
CREATE VIEW grader_num_assignment AS
SELECT username, count(distinct assignment_id) as num_assignment_graded
FROM grader_assignment
group by username;

-- graders have graded on every assignment
CREATE VIEW every_assignment AS
SELECT username
FROM grader_num_assignment, Assignment
WHERE num_assignment_graded = (SELECT count(distinct assignment_id) FROM Assignment);

-- graders have completed grading for at least 10 groups on each assignment
CREATE VIEW ten_groups AS
SELECT distinct username
FROM every_assignment natural join grader_assignment natural join Result
group by username, assignment_id
having count(*) >= 10;

-- combine grader and mark_percent
CREATE VIEW grader_mark AS
SELECT mark_percent, Grader.group_id, total_mark.assignment_id, username
FROM Grader join total_mark on Grader.group_id = total_mark.group_id;

-- combine grader, average mark_percent, and due date
CREATE VIEW grader_avgmark_duedate AS
SELECT avg(mark_percent) as average_mark, username, due_date
FROM grader_mark natural join Assignment
group by username, due_date;

-- average grade they have given has not gone up consistently
CREATE VIEW not_up AS
SELECT distinct g1.username
FROM grader_avgmark_duedate as g1, grader_avgmark_duedate as g2
WHERE g1.username = g2.username and g1.due_date > g2.due_date and g1.average_mark < g2.average_mark;

-- average grade they have given has gone up consistently
CREATE VIEW up AS
(SELECT * FROM ten_groups) except (SELECT * FROM not_up);

-- average grade for not first assignment
CREATE VIEW answer1 AS
SELECT username, (firstname || ' ' || surname) as ta_name
FROM up natural join MarkusUser;

-- average grade for not first assignment
CREATE VIEW answer2 AS
SELECT username, avg(average_mark) as average_mark_all_assignments, max(average_mark) - min(average_mark) as mark_change_first_last
FROM up natural join grader_avgmark_duedate
group by username;


-- Final answer.
INSERT INTO q2 
	-- put a final query here so that its results will go into the table.
(SELECT ta_name, average_mark_all_assignments, mark_change_first_last
FROM answer1 natural join answer2);